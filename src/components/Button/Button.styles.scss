@import '../../parameters/sizes';
@import '../../parameters/colors';

@mixin button-base($type: 'primary', $size: 'normal', $outline: false) {
  $sizes: map-get($button-sizes, $size);
  $is-primary: $type == 'primary';

  $primary-color: map-get($general-colors, 'primary-orange-500');
  $secondary-color: map-get($general-colors, 'secondary-green-2-500');
  $primary-hover: map-get($general-colors, 'primary-orange-400');
  $secondary-hover: map-get($general-colors, 'secondary-green-2-400');

  // Determinar colores basados en tipo y outline
  $bg-color: if(
    $outline,
    transparent,
    if($is-primary, $primary-color, $secondary-color)
  );
  $text-color: if($outline, light-dark(#000, #fff), if($is-primary, #000, #fff));
  $border-color: if($is-primary, $primary-color, $secondary-color);

  width: var(--width, map-get($sizes, 'width'));
  height: var(--height, map-get($sizes, 'height'));
  padding: map-get($sizes, 'padding');
  background-color: $bg-color;
  border: if($outline, 2px solid $border-color, none);
  color: $text-color !important;
  text-align: center;
  text-decoration: none;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: var(--margin, 0);
  cursor: pointer;
  border-radius: 0.5rem;
  overflow: hidden;

  font: {
    size: map-get($sizes, 'fontSize') !important;
    weight: 500 !important;
  }

  // Estados del bot√≥n
  &:not(:disabled) {
    &:hover {
      $hover-bg-color: if($is-primary, $primary-hover, $secondary-hover);
      background-color: $hover-bg-color;
      color: if($is-primary, #000, #fff) !important;
      border: none;

      :only-child {
        fill: if($is-primary, #000, #fff) !important;
      }
    }

    &:active {
      $active-color: if($is-primary, $primary-color, $secondary-color);
      background-color: $active-color;
      color: if($is-primary, #000, #fff) !important;

      // @if $is-primary {F
      //   border: 4px solid $primary-hover;
      // }

      :only-child {
        fill: if($is-primary, #000, #fff) !important;
      }
    }
  }

  :only-child {
    fill: if($outline, $border-color, if($is-primary, #000, white)) !important;
  }

  // Estado deshabilitado
  &:disabled {
    $disabled-color: if(
      $is-primary,
      map-get($general-colors, 'primary-orange-400'),
      map-get($general-colors, 'secondary-green-2-400')
    );
    $disabled-text-color: light-dark(#000, #fff);
    background-color: if($outline, transparent, $disabled-color);
    cursor: not-allowed;
    color: $disabled-text-color !important;
    border: if($outline, 2px solid $disabled-color, none);

    :only-child {
      fill: $disabled-text-color !important;
    }
  }

  // Media queries
  @media screen and (max-width: 60rem) {
    width: var(--width, map-get($sizes, 'smWidth'));
    font-size: 0.8rem;
  }

  @media screen and (max-width: 20rem) {
    font-size: 0.5rem;
  }
}

.tvr-comp-button-only-icon {
  border-radius: 1.3rem !important;
}

@mixin generate-button-classes($type) {
  .tvr-comp-button-#{$type} {
    @include button-base($type: $type);

    &.tvr-comp-button-outline {
      @include button-base($type: $type, $outline: true);
    }

    @each $size in ('small', 'normal', 'large') {
      &.tvr-comp-button-#{$size} {
        @include button-base($type: $type, $size: $size);

        &.tvr-comp-button-outline {
          @include button-base($type: $type, $size: $size, $outline: true);
        }
      }
    }
  }
}

// Generar clases
@include generate-button-classes('primary');
@include generate-button-classes('secondary');
