@import "../../parameters/sizes";
@import "../../parameters/colors";

@mixin button-base(
  $type: "primary",
  $size: "normal",
  $variant: null
) {
  $sizes: map-get($button-sizes, $size);
  $is-primary: $type == "primary";
  $is-orange: $variant == "orange";

  $bg-color: if(
    $is-primary,
    if(
      $is-orange,
      map-get($general-colors, "secondary"),
      map-get($general-colors, "primary")
    ),
    transparent
  );
  $text-color: if(
    $is-primary,
    white,
    if(
      $is-orange,
      map-get($general-colors, "secondary"),
      light-dark(
        map-get($general-colors, "terciary"),
        map-get($general-colors, "primary")
      )
    )
  );
  $border-color: if(
    $is-orange,
    map-get($general-colors, "secondary"),
    light-dark(
      map-get($general-colors, "terciary"),
      map-get($general-colors, "primary")
    )
  );

  width: var(--width, map-get($sizes, "width"));
  height:  map-get($sizes, "height");
  padding: map-get($sizes, "padding");
  background-color: $bg-color;
  border: if($is-primary, none, 2px solid $border-color);
  color: $text-color !important;
  text-align: center;
  text-decoration: none;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: var(--margin, 1rem 0);
  cursor: pointer;
  border-radius: if($is-orange, 1rem, 0.5rem);
  @if $is-orange {
    border-top-right-radius: 0;
  }
  font: {
    size: map-get($sizes, "fontSize") !important;
    weight: 500 !important;
  }

  &:not(:disabled) {
    &:hover {
      $hover-color: if(
        $is-orange,
        map-get($general-colors, "secondaryHover"),
        map-get($general-colors, "primaryHover")
      );
      background-color: $hover-color;
      color: if($is-orange, #fff, #000) !important;
      border: none;

      :only-child {
        fill: if($is-orange, #fff, #000) !important;
      }
    }

    &:active {
      $active-color: if(
        $is-orange,
        map-get($general-colors, "quaternary"),
        map-get($general-colors, "terciary")
      );
      background-color: $active-color;
      color: #fff !important;
      @if $is-orange {
        border: 4px solid map-get($general-colors, "secondaryHover");
      }

      :only-child {
        fill: #fff !important;
      }
    }
  }

  :only-child {
    fill: if($is-primary, white, $border-color) !important;
  }

  &:disabled {
    $disabled-color: light-dark(
      map-get($general-colors, "disabled"),
      map-get($general-colors, "disabledSecond")
    );
    $disabled-text-color: light-dark(
      map-get($general-colors, "disabledSecond"),
      map-get($general-colors, "disabled")
    );
    background-color: $disabled-color;
    cursor: not-allowed;
    color: $disabled-text-color !important;
    border: none;
    opacity: 0.7;

    :only-child {
      fill: $disabled-text-color !important;
    }
  }

  @media screen and (max-width: 60rem) {
    width: var(--width, map-get($sizes, "smWidth"));
    font-size: 0.8rem;
  }

  @media screen and (max-width: 20rem) {
    font-size: 0.5rem;
  }
}

@mixin generate-button-classes($type, $variant: null) {
  $class-name: if($variant, "tvr-comp-button-#{$variant}-#{$type}", "tvr-comp-button-#{$type}");

  .#{$class-name} {
    @include button-base($type: $type, $variant: $variant);

    @each $size in ("small", "normal", "large") {
      &.tvr-comp-button-#{$size} {
        @include button-base($type: $type, $size: $size, $variant: $variant);
      }
    }
  }
}

@include generate-button-classes("primary");
@include generate-button-classes("secondary");
@include generate-button-classes("primary", "orange");
@include generate-button-classes("secondary", "orange");
