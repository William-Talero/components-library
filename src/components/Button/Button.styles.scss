@import "../../parameters/sizes";
@import "../../parameters/colors";

@mixin button-base(
  $type: "primary",
  $size: "md",
  $w: null,
  $h: null,
  $m: null
) {
  width: if($w, $w, map-get(map-get($button-sizes, $size), "width"));
  height: if($h, $h, map-get(map-get($button-sizes, $size), "height"));
  padding: map-get(map-get($button-sizes, $size), "padding");
  background-color: if(
    $type == "primary",
    map-get($general-colors, "primary"),
    transparent
  );
  border: if(
    $type == "primary",
    none,
    2px solid
      light-dark(
        map-get($general-colors, "terciary"),
        map-get($general-colors, "primary")
      )
  );
  color: if(
    $type == "primary",
    white,
    light-dark(
      map-get($general-colors, "terciary"),
      map-get($general-colors, "primary")
    )
  ) !important;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  margin: if($m, $m, 1rem 0);
  cursor: pointer;
  border-radius: 0.5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: map-get(map-get($button-sizes, $size), "fontSize") !important;
  font-weight: 500 !important;

  &:hover {
    background-color: map-get($general-colors, "primaryHover");
    color: #000 !important;
    border: none;
  }

  :only-child {
    fill: if(
      $type == "primary",
      white,
      map-get($general-colors, "terciary")
    ) !important;
  }

  &:hover :only-child {
    fill: #000 !important;
  }

  &:disabled {
    background-color: light-dark(
      map-get($general-colors, "disabled"),
      map-get($general-colors, "disabledSecond")
    );
    cursor: not-allowed;
    color: light-dark(
      map-get($general-colors, "disabledSecond"),
      map-get($general-colors, "disabled")
    ) !important;
    border: none;

    :only-child {
      fill: map-get($general-colors, "disabledSecond") !important;
    }

    &:hover {
      background-color: map-get($general-colors, "disabled");
      color: map-get($general-colors, "disabledSecond") !important;
    }
  }

  &:active {
    background-color: map-get($general-colors, "terciary");
    color: #fff !important;

    :only-child {
      fill: #fff !important;
    }
  }

  @media screen and (max-width: 60rem) {
    width: if($w, $w, map-get(map-get($button-sizes, $size), "smWidth"));
    font-size: 0.8rem;
  }

  @media screen and (max-width: 20rem) {
    font-size: 0.5rem;
  }
}

.button-primary {
  @include button-base($type: "primary");

  &.button-sm {
    @include button-base($type: "primary", $size: "sm");
  }

  &.button-md {
    @include button-base($type: "primary", $size: "md");
  }

  &.button-lg {
    @include button-base($type: "primary", $size: "lg");
  }
}

.button-secondary {
  @include button-base($type: "secondary");

  &.button-sm {
    @include button-base($type: "secondary", $size: "sm");
  }
  &.button-md {
    @include button-base($type: "secondary", $size: "md");
  }
  &.button-lg {
    @include button-base($type: "secondary", $size: "lg");
  }
}

// .orange-button-element {
//   @include button-base($type: "primary", $size: "md");
//   height: 2.5rem;
//   background-color: if(
//     $type == "primary",
//     map-get($general-colors, "secondary"),
//     transparent
//   );
//   border-radius: 1rem;
//   border-top-right-radius: 0;
//   border: if(
//     $type == "primary",
//     none,
//     1px solid map-get($general-colors, "quaternary")
//   );
//   color: if(
//     $type == "primary",
//     white,
//     map-get($general-colors, "quaternary")
//   ) !important;

//   &:hover {
//     background-color: map-get($general-colors, "secondaryHover");
//     color: #fff !important;
//   }

//   &:active {
//     background-color: map-get($general-colors, "quaternary");
//     border: 4px solid map-get($general-colors, "secondaryHover");
//   }

//   &:disabled {
//     background-color: map-get($general-colors, "disabledSecond");
//     color: #fff !important;
//     border: none;
//   }
// }
